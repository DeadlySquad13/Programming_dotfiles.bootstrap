
snippet me "module.exports" b
module.exports = $1;
endsnippet

snippet constr "constructor" b
constructor() {
	super();
	$0
}
endsnippet

snippet ce "console.error" b
console.error($1);
endsnippet

# -----------------------------------------------------------------------------

# Relay

snippet irelay "import Relay"
import { createFragmentContainer, graphql } from 'react-relay';
endsnippet

snippet frag "GraphQL fragment" b
${1:thing}: graphql\`
	fragment `!v expand('%:t:r')`_$1 on ${2:`!p snip.rv = t[1].capitalize()`} {
		${3:id}
	}
\`,
endsnippet

snippet cfc "createFragmentContainer" b
export default createFragmentContainer(`!v expand('%:t:r')`, {
	${1:thing}: graphql\`
		fragment `!v expand('%:t:r')`_$1 on ${2:`!p snip.rv = t[1].capitalize()`} {
			${3:id}
		}
	\`,
})
endsnippet

snippet relayboiler "Relay fragment container component with TS" b
import React from 'react';
import { FormattedMessage } from 'react-intl';

import { createFragmentContainer, graphql } from 'react-relay';
import { $2_$1 as `!p snip.rv = t[1].capitalize()` } from './__generated__/$2_$1.graphql';

interface Props {
	$1: `!p snip.rv = t[1].capitalize()`;
}

function ${2:`!v expand('%:t:r')`}({ ${1:thing} }: Props) {
	return (
		<div>
			${3:<FormattedMessage id="todo" defaultMessage="TODO" />}
		</div>
	);
}

export default createFragmentContainer(
	$2,
	graphql\`
		fragment $2_$1 on `!p snip.rv = t[1].capitalize()` {
			id
		}
	\`,
);
endsnippet

snippet irt "Import relay type"
import { `!p snip.rv = ''.join(x for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`_$1 as `!p snip.rv = t[1].capitalize()` } from './__generated__/`!p snip.rv = ''.join(x for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`_$1.graphql';
endsnippet

snippet irprops "Relay type with props"
import { `!p snip.rv = ''.join(x for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`_$1 as `!p snip.rv = t[1].capitalize()` } from './__generated__/`!p snip.rv = ''.join(x for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`_$1.graphql';

interface Props {
	$1: `!p snip.rv = t[1].capitalize()`;
}
endsnippet

# -----------------------------------------------------------------------------

# react-intl

snippet iintl "Import react-intl"
import { FormattedMessage } from 'react-intl';
endsnippet

snippet fm "FormattedMessage"
<FormattedMessage id="$1" defaultMessage="$2" />
endsnippet

# -----------------------------------------------------------------------------

# React

snippet ss "setState" b
this.setState({ $1 });
endsnippet

snippet ir "Import React"
import React from "react";
endsnippet

snippet ipt "Import prop-types"
import t from "prop-types";
endsnippet

snippet iprops "interface Props"
interface Props {
	${1:name}: ${2:type};
}
endsnippet

snippet rfc "React Functional Component" b
const ${1:`!v expand('%:t:r')`} = (${2:{...props}}) => {
	return (
		<div>
			$3
		</div>
	);
}
$1.defaultProps = {
};
$1.propTypes = {
};
endsnippet

snippet rfc! "React Functional Component (with imports)" b
import React from "react";
import t from "prop-types";

const ${1:`!v expand('%:t:r')`} = (${2:{...props}}) => {
	return (
		<div>
			$3
		</div>
	);
}
$1.defaultProps = {
};
$1.propTypes = {
};

export default $1;
endsnippet

snippet rccc "createClass" b
export const ${1:`!p snip.rv = ''.join(x for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`} = React.createClass({
	render() {
		return (
			$0
		);
	}
});
endsnippet

snippet rcc "React.Component" b
export default class ${1:`!p snip.rv = ''.join(x for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`} extends React.Component {
	render() {
		return (
			$0
		);
	}
}
endsnippet

snippet importreact "import React" b
import React from 'react';
import PropTypes as PT from 'prop-types';
endsnippet

snippet cdm "componentDidMount" b
componentDidMount() {
	$0
}
endsnippet

snippet cdu "componentDidUpdate" b
componentDidUpdate(prevProps, prevState) {
	$0
}
endsnippet

snippet cwm "componentWillMount" b
componentWillMount() {
	$0
}
endsnippet

snippet cwrp "componentWillReceiveProps" b
componentWillReceiveProps(nextProps) {
	$0
}
endsnippet

snippet cwum "componentWillUnmount" b
componentWillUnmount() {
	$0
}
endsnippet

snippet cwu "componentWillUpdate" b
componentWillUpdate(nextProps, nextState) {
	$0
}
endsnippet

snippet gdp "getDefaultProps" b
getDefaultProps() {
	return {
		$0
	};
}
endsnippet

snippet gis "getInitialState" b
getInitialState() {
	return {
		$0
	};
}
endsnippet

snippet pt "propTypes" b
static propTypes = {
	$0
}
endsnippet

snippet scu "shouldComponentUpdate" b
shouldComponentUpdate(nextProps, nextState) {
	return ${1:true};
}
endsnippet

# -----------------------------------------------------------------------------

# Mocha testing
snippet desc
describe('${1:feature}', () => {
	${2}
});
endsnippet

snippet desca
describe('${1:feature}', async () => {
	${2}
});
endsnippet

snippet descf
describe('${1:feature}', function() {
	${2}
});
endsnippet

snippet it
it('${1:should do something}', () => {
	${2}
});
endsnippet

snippet ita
it('${1:should do something}', async () => {
	${2}
});
endsnippet

snippet itd
it('${1:should do something}', (done) => {
	${2}
	done();
});
endsnippet

snippet itf
it('${1:should do something}', function(done) {
	${2}
	done()
});
endsnippet

snippet bef
before(() => {
	${1}
});
endsnippet

snippet beff
before(function() {
	${1}
});
endsnippet

snippet af
after(() => {
	${1}
});
endsnippet

snippet aff
after(function() {
	${1}
});
endsnippet

snippet befe
beforeEach(() => {
	${1}
});
endsnippet

snippet befef
beforeEach(function() {
	${1}
});
endsnippet

snippet afe
afterEach(() => {
	${1}
});
endsnippet

snippet afef
afterEach(function() {
	${1}
});
endsnippet

# -----------------------------------------------------------------------------

# Selenium testing

snippet ats "await takeScreenshot"
await takeScreenshot($1);
endsnippet

snippet asl "await browser.sleep"
await browser.sleep(${1:200});
endsnippet

snippet apr "await empty promise"
await new Promise(() => {});
endsnippet
