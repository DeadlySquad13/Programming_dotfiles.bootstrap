# Breakpoints
# vim-snippets puts these on 2 lines. I prefer a single line.
snippet pdb
__import__("pdb").set_trace()
endsnippet

snippet ipdb
__import__("ipdb").set_trace()
endsnippet

snippet lipdb
from ipdb import launch_ipdb_on_exception
with launch_ipdb_on_exception():
	${1}
endsnippet

snippet rdb
from celery.contrib import rdb; rdb.set_trace()
endsnippet

# Logging

snippet glog
import logging
logger = logging.getLogger(__name__)
endsnippet

snippet ldeb
logger.debug('${1}')
endsnippet

snippet linfo
logger.info('${1}')
endsnippet

snippet lerr
logger.error('${1}')
endsnippet

snippet lwarn
logger.warn('${1}')
endsnippet

# Nose testing

snippet _==
assert_equal(${1}, ${2})
endsnippet

snippet _!=
assert_not_equal(${1}, ${2})
endsnippet

snippet _in
assert_in(${1:obj}, ${2:container})
endsnippet

snippet _raises
assert_raises(${1:exc})
endsnippet

snippet _true
assert_true(${1})
endsnippet

snippet _false
assert_false(${1})
endsnippet

# Pytest testing

snippet fixture
@pytest.fixture()
def ${1:name}(${2}):
	return ${3}
endsnippet

snippet parametrize
@pytest.mark.parametrize('${1:name}',
(
	${2},
))
endsnippet

snippet yfixture
@pytest.yield_fixture()
def ${1:name}(${2}):
	yield ${3}
endsnippet

snippet a==
assert ${1} == ${2}
endsnippet

snippet a!=
assert ${1} != ${2}
endsnippet

snippet atype
assert type(${1}) is ${2}
endsnippet

snippet ain
assert ${1:obj} in ${2:container}
endsnippet

snippet a!in
assert ${1:obj} not in ${2:container}
endsnippet

snippet araises
with pytest.raises(${1:exc}) as excinfo:
	${2}
endsnippet

snippet atrue
assert ${1} is True
endsnippet

snippet afalse
assert ${1} is False
endsnippet

# typing

snippet top
typing.Optional[${1}]
endsnippet

snippet topt
typing.Optional[${1}]
endsnippet

snippet tli
typing.List
endsnippet

snippet tdi
typing.Dict[${1}, ${2}]
endsnippet

snippet tse
typing.Sequence
endsnippet

snippet tma
typing.Mapping[${1}, ${2}]
endsnippet

snippet tca
typing.Callable
endsnippet

snippet tno
typing.NoReturn
endsnippet

snippet tty
typing.Type[${1}]
endsnippet

snippet tun
typing.Union[${1}]
endsnippet

snippet tan
typing.Any
endsnippet

snippet tany
typing.Any
endsnippet
