stages:
  - docker
  - build
  - check-code
  - docs
  - release

# Service for building our own docker image and using it as container in CI.
services:
    - docker:24.0.5-dind

variables:
    DOCKER_TLS_CERTDIR: "/certs"

build-docker:
    image: docker:24.0.5
    stage: docker
    only:
        changes:
            - pixi.lock
            - pixi.toml
            - Dockerfile.ci
            - .gitlab-ci.yml
    before_script:
        - docker info
          # Login as CI user and make changes in our local gitlab docker registry from it's name.
        - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
    script:
        - docker build -t $CI_REGISTRY/deadlysquad13/mlops_course:latest --file Dockerfile.ci .
        - docker push $CI_REGISTRY/deadlysquad13/mlops_course:latest

# Use our own docker image by default.
default:
    image: $CI_REGISTRY/deadlysquad13/mlops_course:latest

build:
    stage: build
    script:
        - echo "Building the project üöÄ"
        - pixi run --environment dev build
        - echo "Finished, thanks for patience ‚ù§Ô∏è "

format-check:
    stage: check-code
    script:
        - echo "Running format checks üöÄ"
        - pixi run --environment dev format-check
        - echo "Finished, thanks for patience ‚ù§Ô∏è "

lint-check:
    stage: check-code
    script:
        - echo "Running lint checks üöÄ"
        - pixi run --environment dev lint-check
        - echo "Finished, thanks for patience ‚ù§Ô∏è "

types-check:
    stage: check-code
    script:
        - echo "Running types checks üöÄ"
        - pixi run --environment dev types-check
        - echo "Finished, thanks for patience ‚ù§Ô∏è "

order-imports-check:
    stage: check-code
    script:
        - echo "Running order imports checks üöÄ"
        - pixi run --environment dev order-imports-check
        - echo "Finished, thanks for patience ‚ù§Ô∏è "

pages:
    stage: docs
    script:
        - echo "Build docs website üöÄ"
        - pixi run --environment quarto build-docs
        - echo "Pages accessible through ${CI_PAGES_URL}/${PAGES_PREFIX}"
        - echo "Finished, thanks for patience ‚ù§Ô∏è "
    variables:
        PAGES_PREFIX: "" # no prefix by default (master)
    pages:
        path_prefix: "$PAGES_PREFIX"
    environment:
        name: "Pages ${PAGES_PREFIX}"
        url: "${CI_PAGES_URL}/${PAGES_PREFIX}"
    artifacts:
        paths:
          - public
    rules:
        - if: $CI_COMMIT_BRANCH == "staging" # ensure to run on master (with default PAGES_PREFIX)
          variables:
              PAGES_PREFIX: '_stg' # prefix with _stg for the staging branch
        - if: $CI_PIPELINE_SOURCE == "merge_request_event" # conditionally change the prefix on Merge Requests
          when: manual # run pages manually on Merge Requests
          variables:
              PAGES_PREFIX: 'mr$CI_MERGE_REQUEST_IID' # prefix with the mr<iid>, like `mr123`

release-build:
    stage: release
    rules:
        # For tags such as "v1.2.3"
        - if: '$CI_COMMIT_TAG =~ /^v[0-9]+(\.[0-9]+)*$/'
    script:
        - echo "Releasing python package üöÄ"
        # - pixi auth
        # - pixi upload
        - echo "Finished, thanks for patience ‚ù§Ô∏è "
    artifacts:
        expire_in: never
        paths:
            - $CI_PROJECT_DIR/dist
